/* Define the parameters */
sigma: 10;
rho: 28;
beta: 8/3;

/* Initial conditions at t = 0 */
x0: 0.9;
y0: 0;
z0: 0;

/* Time variable */
t: 't; /* We keep 't' as a symbolic variable */

/* First derivatives at t = 0 */
x1: sigma * (y0 - x0);
y1: x0 * (rho - z0) - y0;
z1: x0 * y0 - beta * z0;

/* Second derivatives at t = 0 */
x2: sigma * (y1 - x1);
y2: x1 * (rho - z0) - x0 * z1 - y1;
z2: x1 * y0 + x0 * y1 - beta * z1;

/* Third derivatives at t = 0 */
x3: sigma * (y2 - x2);
y3: x2 * (rho - z0) - x0 * z2 - x1 * z1 - y2;
z3: x2 * y0 + 2 * x1 * y1 + x0 * y2 - beta * z2;

/* Construct the Taylor series expansions up to order 3 */
x_taylor: x0 + x1 * t + (x2 / 2) * t^2 + (x3 / 6) * t^3;
y_taylor: y0 + y1 * t + (y2 / 2) * t^2 + (y3 / 6) * t^3;
z_taylor: z0 + z1 * t + (z2 / 2) * t^2 + (z3 / 6) * t^3;

/* Evaluate numerical values for the coefficients */
x_coeffs_num: ev([x0, x1, x2 / 2, x3 / 6], numer);
y_coeffs_num: ev([y0, y1, y2 / 2, y3 / 6], numer);
z_coeffs_num: ev([z0, z1, z2 / 2, z3 / 6], numer);

/* Display the coefficients */
print("Taylor series coefficients for x(t): ", x_coeffs_num);
print("Taylor series coefficients for y(t): ", y_coeffs_num);
print("Taylor series coefficients for z(t): ", z_coeffs_num);

/* Optionally, expand the Taylor series expressions */
x_taylor_num: ev(expand(x_taylor), numer);
y_taylor_num: ev(expand(y_taylor), numer);
z_taylor_num: ev(expand(z_taylor), numer);

/* Display the truncated Taylor series */
print("Truncated Taylor series for x(t): ", x_taylor_num);
print("Truncated Taylor series for y(t): ", y_taylor_num);
print("Truncated Taylor series for z(t): ", z_taylor_num);

